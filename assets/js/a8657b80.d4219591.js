"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9209],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),s=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(n),u=a,b=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return n?o.createElement(b,r(r({ref:t},c),{},{components:n})):o.createElement(b,r({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[d]="string"==typeof e?e:a,r[1]=p;for(var s=2;s<i;s++)r[s]=n[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3155:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const i=n.p+"assets/images/CopyToClipboard-acfb39aca0875a824ca5024c6f8741c7.png",r={title:"Copy To Clipboard",id:"copy-to-clipboard",description:"Copy To Clipboard Component in TCET Linux Website",sidebar_label:"Copy To Clipboard",keywords:["Copy to clipboard","Clipboard","useOnClickOutside","useRef","useEffect","Function component"]},p=void 0,l={unversionedId:"projects/tcet-linux-website/frontend-components/copy-to-clipboard",id:"projects/tcet-linux-website/frontend-components/copy-to-clipboard",title:"Copy To Clipboard",description:"Copy To Clipboard Component in TCET Linux Website",source:"@site/docs/projects/tcet-linux-website/frontend-components/copy-to-clipboard.mdx",sourceDirName:"projects/tcet-linux-website/frontend-components",slug:"/projects/tcet-linux-website/frontend-components/copy-to-clipboard",permalink:"/docs/projects/tcet-linux-website/frontend-components/copy-to-clipboard",draft:!1,editUrl:"https://github.com/tcet-opensource/documentation/edit/main/docs/projects/tcet-linux-website/frontend-components/copy-to-clipboard.mdx",tags:[],version:"current",lastUpdatedBy:"Himanshu Agarwal",lastUpdatedAt:1688047840,formattedLastUpdatedAt:"Jun 29, 2023",frontMatter:{title:"Copy To Clipboard",id:"copy-to-clipboard",description:"Copy To Clipboard Component in TCET Linux Website",sidebar_label:"Copy To Clipboard",keywords:["Copy to clipboard","Clipboard","useOnClickOutside","useRef","useEffect","Function component"]},sidebar:"docs",previous:{title:"Footer",permalink:"/docs/projects/tcet-linux-website/frontend-components/footer"},next:{title:"Download Section",permalink:"/docs/projects/tcet-linux-website/frontend-components/download-section"}},s={},c=[{value:"Import",id:"import",level:2},{value:"CopyToClipboard",id:"copytoclipboard",level:2},{value:"copyToClipboard",id:"copytoclipboard-1",level:3},{value:"dialog",id:"dialog",level:3},{value:"return",id:"return",level:3},{value:"Export",id:"export",level:2},{value:"Application",id:"application",level:2}],d={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tcet-opensource/tcet-linux-website/blob/main/src/components/CopyToClipboard.tsx"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("em",{parentName:"strong"},"Copy To Clipboard component")))," is used in the ",(0,a.kt)("a",{parentName:"p",href:"https://linux.tcetmumbai.in/#verify"},(0,a.kt)("strong",{parentName:"a"},"fourth section"))," of the ",(0,a.kt)("a",{parentName:"p",href:"https://linux.tcetmumbai.in/"},(0,a.kt)("strong",{parentName:"a"},"TCET Linux website")),". The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tcet-opensource/tcet-linux-website/blob/main/src/components/CopyToClipboard.tsx#L4-L58"},(0,a.kt)("strong",{parentName:"a"},(0,a.kt)("em",{parentName:"strong"},"CopyToClipboard")))," component provides a simple and convenient way to ",(0,a.kt)("strong",{parentName:"p"},"copy text to the clipboard"),". This is a ",(0,a.kt)("em",{parentName:"p"},"common requirement")," in many applications, especially those that involve sharing or saving content. It provides visual feedback through the ",(0,a.kt)("strong",{parentName:"p"},"notification dialog"),", handles user interactions, and enhances the user experience by ",(0,a.kt)("strong",{parentName:"p"},"automatically hiding the dialog")," and closing it when clicked outside. By encapsulating the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"copy-to-clipboard functionality"))," within a dedicated component, our codebase becomes more ",(0,a.kt)("em",{parentName:"p"},"organized")," and ",(0,a.kt)("em",{parentName:"p"},"modular"),". This improves code ",(0,a.kt)("em",{parentName:"p"},"maintainability"),", ",(0,a.kt)("em",{parentName:"p"},"readability"),", and ",(0,a.kt)("em",{parentName:"p"},"makes it easier for other developers to understand and modify")," the code in the future.  "),(0,a.kt)("h2",{id:"import"},"Import"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Here's a breakdown of the code to understand it's functionality:")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The code imports the necessary dependencies:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("em",{parentName:"p"},"React"),": The ",(0,a.kt)("strong",{parentName:"p"},"core library")," for building user interfaces in React.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"useRef"),": A ",(0,a.kt)("strong",{parentName:"p"},"hook")," that creates a mutable ref object to persist a value across component re-renders.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"useEffect"),": A ",(0,a.kt)("strong",{parentName:"p"},"hook")," that allows performing side effects in functional components.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"useOnClickOutside"),": A custom hook that handles clicks outside a specified element."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="CopyToClipboard.tsx" {1,2} showLineNumbers',title:'"CopyToClipboard.tsx"',"{1,2}":!0,showLineNumbers:!0},'import React, { useRef, useEffect } from "react";\nimport useOnClickOutside from "../hooks/useOnClickOutside";\n // CopyToClipboard component \n')))),(0,a.kt)("h2",{id:"copytoclipboard"},"CopyToClipboard"),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("strong",{parentName:"p"},"CopyToClipboard component")," is defined as a ",(0,a.kt)("inlineCode",{parentName:"p"},"function")," component with a prop type of ",(0,a.kt)("inlineCode",{parentName:"p"},"{ text: string }"),". It takes a single prop called text, which represents ",(0,a.kt)("em",{parentName:"p"},"the text to be copied to the clipboard"),"."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="CopyToClipboard.tsx" {2-3} showLineNumbers',title:'"CopyToClipboard.tsx"',"{2-3}":!0,showLineNumbers:!0},"//Import\nconst CopyToClipboard: React.FC<{\n   text: string;\n   }> = ({ text }) => {\n          // copyToClipboard component\n   }\n")))),(0,a.kt)("h3",{id:"copytoclipboard-1"},"copyToClipboard"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Inside the CopyToClipboard component"),", there is a ",(0,a.kt)("strong",{parentName:"p"},"function copyToClipboard")," defined. This function is called when the ",(0,a.kt)("inlineCode",{parentName:"p"},"button")," is clicked and is responsible for copying the text prop value to the clipboard."),(0,a.kt)("p",null,"Inside the copyToClipboard function:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"navigator.clipboard.writeText(text)")," This line uses the navigator.clipboard API to write the text value to the clipboard.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"dialog.current?.show()"),": This line shows the dialog element if it exists (using optional chaining).")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},'dialog.current.style.display = "flex"'),': This line sets the CSS display property of the dialog element to "flex".')),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"A ",(0,a.kt)("inlineCode",{parentName:"p"},"setTimeout function"),' is used to hide the dialog element after 2000 milliseconds (2 seconds). It sets the display property to "none" and closes the dialog.'),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="CopyToClipboard.tsx" {2-6} showLineNumbers',title:'"CopyToClipboard.tsx"',"{2-6}":!0,showLineNumbers:!0},'// CopyToClipboard Function\n    const copyToClipboard = () => {\n       navigator.clipboard.writeText(text);\n       dialog.current?.show();\n       dialog.current.style.display = "flex";\n       const timer = setTimeout(() => {\n         dialog.current.style.display = "none";\n         dialog.current?.close();\n       }, 2000);\n   };\n    // dialog component \n')))),(0,a.kt)("h3",{id:"dialog"},"dialog"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"dialog ref")," is created using ",(0,a.kt)("inlineCode",{parentName:"p"},"useRef<HTMLDialogElement>(null)"),". It is used to ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"reference the dialog element in the DOM")),"."),(0,a.kt)("p",null,"Inside the dialog component:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useOnClickOutside")," ",(0,a.kt)("strong",{parentName:"p"},"custom hook")," is called, passing the ",(0,a.kt)("strong",{parentName:"p"},"dialog ref and a callback function"),". This hook adds an ",(0,a.kt)("em",{parentName:"p"},"event listener")," to detect ",(0,a.kt)("em",{parentName:"p"},"clicks outside the dialog element and calls the callback function")," when such a click occurs."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="CopyToClipboard.tsx" {2-6} showLineNumbers',title:'"CopyToClipboard.tsx"',"{2-6}":!0,showLineNumbers:!0},'   // copyToClipboard component\n        const dialog = useRef<HTMLDialogElement>(null);\n          useOnClickOutside(dialog, () => {\n          console.log("clickng outside");\n          dialog.current.style.display = "none";\n          dialog.current?.close();\n        });\n       // return component \n')))),(0,a.kt)("h3",{id:"return"},"return"),(0,a.kt)("p",null,"The major component ",(0,a.kt)("inlineCode",{parentName:"p"},"CopyToClipboard")," returns ",(0,a.kt)("em",{parentName:"p"},"a button element")," representing the ",(0,a.kt)("strong",{parentName:"p"},"copy-to-clipboard button"),"."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The button has a ",(0,a.kt)("inlineCode",{parentName:"li"},"className")," prop that ",(0,a.kt)("em",{parentName:"li"},"applies CSS classes for styling")," the button's appearance."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"onClick prop")," is set to the ",(0,a.kt)("em",{parentName:"li"},"copyToClipboard")," function, so it is ",(0,a.kt)("strong",{parentName:"li"},"triggered when the button is clicked"),"."),(0,a.kt)("li",{parentName:"ol"},"Inside the button element, there is an ",(0,a.kt)("em",{parentName:"li"},"svg element representing an icon"),". It uses the ",(0,a.kt)("em",{parentName:"li"},"SVG format")," and has attributes for styling and defining the icon path."),(0,a.kt)("li",{parentName:"ol"},"Following the svg element, there is a ",(0,a.kt)("inlineCode",{parentName:"li"},"dialog element")," representing the ",(0,a.kt)("strong",{parentName:"li"},"notification dialog")," that appears ",(0,a.kt)("em",{parentName:"li"},"when the text is copied"),". It initially has a ",(0,a.kt)("em",{parentName:"li"},"className prop that applies CSS classes for positioning and styling")," the dialog.")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'Inside the dialog element, there is a p element containing the text "Copied to clipboard".'),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="CopyToClipboard.tsx" {2,3,9,10,17,23-28} showLineNumbers',title:'"CopyToClipboard.tsx"',"{2,3,9,10,17,23-28}":!0,showLineNumbers:!0},'   // dialog component\n        return (\n          <button\n          className="p-1 border border-slate-400\n          cursor-pointer\n          hover:bg-slate-200 hover:bg-opacity-20\n          active:bg-opacity-40 rounded-lg text-slate-100\n          overflow-visible "\n            onClick={copyToClipboard} >\n            <svg\n              xmlns="http://www.w3.org/2000/svg"\n              fill="none"\n              viewBox="0 0 24 24"\n              strokeWidth={1.5}\n              stroke="currentColor"\n              className="w-6 h-6" >\n              <path\n                strokeLinecap="round"\n                strokeLinejoin="round"\n                d="M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.       03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.      4.084.612v0a.75.75 0 01-.75.75H9a.75.75 0 01-.      75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.    049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.        907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.       25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.       907-2.185a48.208 48.208 0 011.927-.184"/>\n            </svg>\n            <dialog\n              ref={dialog}\n              className="top-3 sm:left-56  w-max items-center         rounded-lg h-4 bg-white bg-opacity-60 "\n            >\n              <p className="">Copied to clipboard</p>\n            </dialog>\n          </button>\n        );\n      };\n   // export CopyToClipboard component \n')))),(0,a.kt)("h2",{id:"export"},"Export"),(0,a.kt)("p",null,"The CopyToClipboard component is exported as the ",(0,a.kt)("inlineCode",{parentName:"p"},"default export")," component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="CopyToClipboard.tsx" {2} showLineNumbers',title:'"CopyToClipboard.tsx"',"{2}":!0,showLineNumbers:!0},"        // CopyToClipboard component\n    export default CopyToClipboard;\n")),(0,a.kt)("h2",{id:"application"},"Application"),(0,a.kt)("p",null,"This component can be used by providing ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"the text prop with the desired text to be copied")),". When the button is clicked, the text will be ",(0,a.kt)("strong",{parentName:"p"},"copied")," to the clipboard, and a ",(0,a.kt)("strong",{parentName:"p"},"notification dialog")," will appear briefly to indicate the successful copy operation."),(0,a.kt)("img",{src:i,style:{border:"2px solid gray"}}),(0,a.kt)("br",null),(0,a.kt)("center",null,(0,a.kt)("b",null,(0,a.kt)("figcaption",null,"TCET Linux- Copy To Clipboard"))),(0,a.kt)("br",null),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You can visit"),(0,a.kt)("ol",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/tcet-opensource/tcet-linux-website/blob/main/src/components/CopyToClipboard.tsx"},"CopyToClipboard.tsx"))," Source Code."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"https://linux.tcetmumbai.in/#verify"},"Verify Downloads Section"))," of the TCET Linux website to see the application of the component."))),(0,a.kt)("br",null),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"The ",(0,a.kt)("a",{parentName:"em",href:"copy-to-clipboard"},(0,a.kt)("strong",{parentName:"a"},"Copy To Clipboard component"))," was succesfully executed! Let's move on and see how we created the ",(0,a.kt)("a",{parentName:"em",href:"download-section"},(0,a.kt)("strong",{parentName:"a"},"Download Section"))," component of the ",(0,a.kt)("strong",{parentName:"em"},(0,a.kt)("a",{parentName:"strong",href:"https://linux.tcetmumbai.in/"},"TCET Linux Website")),".")))}u.isMDXComponent=!0}}]);